name: 1.0$(Rev:.r)

trigger:
- k8sdevops

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  azureSubEndpoint: '10M Client Demo'
  acrName: 'cdk8spu.azurecr.io'
  imageRepoName: 'PartsUnlimited-Website'

steps:
# - script: docker build -f Dockerfile -t $(imageName) .
#   displayName: 'docker build'
#   continueOnError: true

- task: Docker@1
  displayName: 'Build the image'
  inputs:
    azureSubscriptionEndpoint: '$(azureSubEndpoint)'
    azureContainerRegistry: '$(acrName)'
    imageName: '$(imageRepoName):$(Build.BuildNumber)'
  continueOnError: true # to make sure we get the test results even when the tests fail

- script: |
    export id=$(docker images --filter "label=test=true" -q | head -1)
    docker create --name testcontainer $id
    docker cp testcontainer:/testresults ./testresults
    docker rm testcontainer
  displayName: 'get test results'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/test*.xml' 
    searchFolder: '$(System.DefaultWorkingDirectory)/testresults'
    publishRunAttachments: true
  displayName: 'Publish test results'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/testresults/coverage/coverage.cobertura.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/testresults/coverage/reports'
  displayName: 'Publish coverage reports'

- task: Docker@1
  displayName: 'Push the image'
  inputs:
    command: 'Push an image'
    azureSubscriptionEndpoint: '$(azureSubEndpoint)'
    azureContainerRegistry: '$(acrName)'
    imageName: '$(imageRepoName):$(Build.BuildNumber)'
  condition: succeeded()